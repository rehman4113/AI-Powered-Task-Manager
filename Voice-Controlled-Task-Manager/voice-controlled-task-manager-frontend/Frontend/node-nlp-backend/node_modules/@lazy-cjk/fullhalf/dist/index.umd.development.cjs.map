{"version":3,"file":"index.umd.development.cjs","sources":["../src/index.ts"],"sourcesContent":["\nimport { EnumFullHalfTableType, toFullWidthCharCode, toHalfWidthCharCode } from '@lazy-cjk/fullhalf-char-code';\nimport UString from 'uni-string';\nimport { all } from 'deepmerge';\nimport { tableFullHalf, ITableFullHalfDefaultIncludeKey, tableFullHalfDefaultInclude, ITableFullHalfObject } from '@lazy-cjk/fullhalf-data';\n\nlet typeOnly: IOptions = {\n\tonly: {\n\t\tnumber: true,\n\t},\n};\n\nexport const toFullNumber = factory<string>(toFullWidthCharCode, EnumFullHalfTableType.FULL_WIDTH, typeOnly);\nexport const toHalfNumber = factory<string>(toHalfWidthCharCode, EnumFullHalfTableType.HALF_WIDTH, typeOnly);\n\ntypeOnly = {\n\tonly: {\n\t\teng: true,\n\t},\n};\n\nexport const toFullEnglish = factory<string>(toFullWidthCharCode, EnumFullHalfTableType.FULL_WIDTH, typeOnly);\nexport const toHalfEnglish = factory<string>(toHalfWidthCharCode, EnumFullHalfTableType.HALF_WIDTH, typeOnly);\n\ntypeOnly = {\n\tonly: {\n\t\tdefault: true,\n\t},\n};\n\nexport const toFullWidth = factory<string>(toFullWidthCharCode, EnumFullHalfTableType.FULL_WIDTH, typeOnly);\nexport const toHalfWidth = factory<string>(toHalfWidthCharCode, EnumFullHalfTableType.HALF_WIDTH, typeOnly);\n\nexport function _optionsType(data: IOptionsType)\n{\n\tif (data)\n\t{\n\t\tif (typeof data.exists === 'boolean')\n\t\t{\n\t\t\tfor (let key in tableFullHalf[0])\n\t\t\t{\n\t\t\t\tif (key.indexOf('default') == 0)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (data[key] !== false)\n\t\t\t\t{\n\t\t\t\t\tdata[key] = data.exists;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdelete data.exists;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (typeof data.default === 'boolean')\n\t\t\t{\n\t\t\t\tfor (let key of tableFullHalfDefaultInclude)\n\t\t\t\t{\n\t\t\t\t\tif (data[key] !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\tdata[key] = data.default;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdelete data.default;\n\t\t\t}\n\n\t\t\tif (typeof data.not_default2 === 'boolean')\n\t\t\t{\n\t\t\t\tdata.both = data.space = data.not_default2;\n\t\t\t\tdelete data.not_default2;\n\t\t\t}\n\n\t\t\tif (typeof data.both === 'boolean')\n\t\t\t{\n\t\t\t\tdata.number = data.eng = data.both;\n\t\t\t\tdelete data.both;\n\t\t\t}\n\n\t\t\tif (typeof data.eng === 'boolean')\n\t\t\t{\n\t\t\t\tdata['a-z'] = data['A-Z'] = data.eng;\n\t\t\t\tdelete data.eng;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn data;\n}\n\nexport function _chkType(charCode: number, data: ITableFullHalfObject)\n{\n\tif (data.from && data.to && data.from <= charCode && charCode <= data.to)\n\t{\n\t\treturn true;\n\t}\n\telse if (data.values?.includes(charCode))\n\t{\n\t\treturn true;\n\t}\n}\n\nexport function chkType(charCode: number, key: ITableFullHalfDefaultIncludeKey, type: EnumFullHalfTableType)\n{\n\tlet data: ITableFullHalfObject = tableFullHalf[type][key];\n\n\t//console.log(charCode, data);\n\n\tif (Array.isArray(data.not) && data.not.length)\n\t{\n\t\tfor (let d of data.not)\n\t\t{\n\t\t\tif (_chkType(charCode, d))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (_chkType(charCode, data))\n\t{\n\t\treturn true;\n\t}\n}\n\n//@ts-ignore\nexport function process<T, U = string>(str: unknown, charProcess: ICharProcessor, options: IOptions)\n{\n\tlet ret: number[] = [];\n\n\toptions.skip = _optionsType(options.skip);\n\toptions.only = _optionsType(options.only);\n\n\t//console.log(options);\n\n\tlet _str = Array.isArray(str) ? str : new UString(str);\n\n\tfor (let char of _str)\n\t{\n\t\tlet _skip: boolean;\n\n\t\t// @ts-ignore\n\t\t//let charCode = typeof char == 'number' ? char : char.charCodeAt();\n\t\tlet charCode = typeof char == 'number' ? char : char.codePointAt();\n\n\t\tif (options.only)\n\t\t{\n\t\t\t_skip = true;\n\n\t\t\tfor (let key in options.only)\n\t\t\t{\n\t\t\t\t//console.log(char, charCode, [key], chkType(charCode, key, options.type));\n\n\t\t\t\tif (options.only[key] && chkType(charCode, key as ITableFullHalfDefaultIncludeKey, options.type))\n\t\t\t\t{\n\t\t\t\t\t_skip = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//console.log(char, charCode, _skip);\n\t\t}\n\n\t\tif (!_skip && options.skip)\n\t\t{\n\t\t\tfor (let key in options.skip)\n\t\t\t{\n\t\t\t\tif (options.skip[key] && chkType(charCode, key as ITableFullHalfDefaultIncludeKey, options.type))\n\t\t\t\t{\n\t\t\t\t\t_skip = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (_skip)\n\t\t{\n\t\t\tret.push(charCode);\n\t\t\tcontinue;\n\t\t}\n\n\t\tret.push(charProcess(charCode));\n\t}\n\n\tif (options.returnType)\n\t{\n\t\treturn ret as number[];\n\t}\n\n\t//return String.fromCharCode.apply(String, ret);\n\treturn String.fromCodePoint.apply(String, ret);\n}\n\nexport function factory<T = string>(charProcessor: ICharProcessor,\n\ttype: number | EnumFullHalfTableType,\n\toverwriteOptions?: IOptions\n): IFactoryFn\n{\n\t//const deepmerge = require('deepmerge');\n\n\t// @ts-ignore\n\treturn (str, options?: IOptions) =>\n\t{\n\t\toptions = all([\n\t\t\t{\n\t\t\t\t//skip: {},\n\t\t\t}, options || {}, overwriteOptions || {}, {\n\t\t\t\ttype: type,\n\t\t\t},\n\t\t]);\n\n\t\t//console.log(options);\n\n\t\treturn process<T>(str, charProcessor, options);\n\t};\n}\n\nexport function _filterTable(data: ITableFullHalfObject)\n{\n\tlet _a: number[] = [];\n\n\tif (data.from && data.to)\n\t{\n\t\tfor (let i = data.from; i <= data.to; i++)\n\t\t{\n\t\t\t_a.push(i);\n\t\t}\n\t}\n\n\tif (data.values)\n\t{\n\t\t_a = _a.concat(data.values)\n\t}\n\n\tif (Array.isArray(data.not) && data.not.length)\n\t{\n\t\t_a = _a.filter(function (charCode)\n\t\t{\n\t\t\tfor (let d of data.not)\n\t\t\t{\n\t\t\t\tif (_chkType(charCode, d))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\treturn _a;\n}\n\nexport interface IOptionsType extends Partial<Record<ITableFullHalfDefaultIncludeKey, boolean>>\n{\n\teng?: boolean,\n\tnumber?: boolean,\n\n\t/**\n\t * eng & number\n\t */\n\tboth?: boolean;\n\n\tspace?: boolean;\n\texists?: boolean;\n\n\tdefault?: boolean;\n\tnot_default?: boolean;\n\tnot_default2?: boolean;\n\n\tslash?: boolean;\n\tbracket?: boolean;\n\n\t[index: string]: boolean;\n}\n\nexport interface IOptionsBase\n{\n\ttype?: number;\n\n\tskip?: IOptionsType;\n\tonly?: IOptionsType;\n\n\tmode?: {\n\t\tonly?: boolean,\n\n\t\t[index: string]: boolean;\n\t};\n}\n\nexport type IOptionsTrue = IOptionsBase & {\n\n\t/**\n\t * 回傳直接回傳陣列而不組合成字串\n\t */\n\treturnType: ILazyTrue;\n\n}\n\nexport type IOptionsFalse = IOptionsBase & {\n\n\t/**\n\t * 回傳直接回傳陣列而不組合成字串\n\t */\n\treturnType?: ILazyFalse;\n\n}\n\nexport interface IOptions extends IOptionsBase\n{\n\n\t/**\n\t * 回傳直接回傳陣列而不組合成字串\n\t */\n\treturnType?: ILazyTrue | ILazyFalse;\n\n}\n\ntype ILazyTrue = true | 1;\ntype ILazyFalse = 0 | false | void | undefined | null;\n\nexport interface IFactoryFn\n{\n\t(str: string | string[], options?: IOptionsFalse): string\n\n\t(str: (string | number)[], options: IOptionsTrue): number[]\n\n\t(str: unknown, options: IOptionsTrue): number[]\n\n\t(str: (string | number)[]): string\n\n\t(str: (string | number)[], options?: IOptionsFalse): string\n\n\t(str: unknown, options: IOptionsFalse): string\n\n\t(str: unknown, options: IOptions): string | number[]\n}\n\nexport type ICharProcessor = (charCode: number) => number\n\nexport default {\n\ttoFullNumber,\n\ttoHalfNumber,\n\n\ttoFullEnglish,\n\ttoHalfEnglish,\n\n\ttoFullWidth,\n\ttoHalfWidth,\n}\n"],"names":["typeOnly","only","number","toFullNumber","factory","toFullWidthCharCode","toHalfNumber","toHalfWidthCharCode","eng","toFullEnglish","toHalfEnglish","default","toFullWidth","toHalfWidth","_optionsType","data","exists","key","tableFullHalf","indexOf","tableFullHalfDefaultInclude","not_default2","both","space","_chkType","charCode","_data$values","from","to","values","includes","chkType","type","Array","isArray","not","length","d","process","str","charProcess","options","ret","skip","_str","UString","char","_skip","codePointAt","push","returnType","String","fromCodePoint","apply","charProcessor","overwriteOptions","all","_filterTable","_a","i","concat","filter"],"mappings":"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"}