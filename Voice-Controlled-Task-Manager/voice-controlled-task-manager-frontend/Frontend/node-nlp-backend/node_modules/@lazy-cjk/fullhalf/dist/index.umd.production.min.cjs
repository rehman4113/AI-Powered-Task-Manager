!function(e, t) {
  "object" == typeof exports && "undefined" != typeof module ? t(exports, require("@lazy-cjk/fullhalf-char-code"), require("uni-string"), require("deepmerge"), require("@lazy-cjk/fullhalf-data")) : "function" == typeof define && define.amd ? define([ "exports", "@lazy-cjk/fullhalf-char-code", "uni-string", "deepmerge", "@lazy-cjk/fullhalf-data" ], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).LazyCjkFullhalf = {}, e.fullhalfCharCode, e.UString, e.deepmerge, e.fullhalfData);
}(this, (function(e, t, o, l, f) {
  "use strict";
  let r = {
    only: {
      number: !0
    }
  };
  const n = factory(t.toFullWidthCharCode, 1, r), a = factory(t.toHalfWidthCharCode, 0, r);
  r = {
    only: {
      eng: !0
    }
  };
  const i = factory(t.toFullWidthCharCode, 1, r), u = factory(t.toHalfWidthCharCode, 0, r);
  r = {
    only: {
      default: !0
    }
  };
  const y = factory(t.toFullWidthCharCode, 1, r), d = factory(t.toHalfWidthCharCode, 0, r);
  function _optionsType(e) {
    if (e) if ("boolean" == typeof e.exists) {
      for (let t in f.tableFullHalf[0]) 0 != t.indexOf("default") && !1 !== e[t] && (e[t] = e.exists);
      delete e.exists;
    } else {
      if ("boolean" == typeof e.default) {
        for (let t of f.tableFullHalfDefaultInclude) !1 !== e[t] && (e[t] = e.default);
        delete e.default;
      }
      "boolean" == typeof e.not_default2 && (e.both = e.space = e.not_default2, delete e.not_default2), 
      "boolean" == typeof e.both && (e.number = e.eng = e.both, delete e.both), "boolean" == typeof e.eng && (e["a-z"] = e["A-Z"] = e.eng, 
      delete e.eng);
    }
    return e;
  }
  function _chkType(e, t) {
    var o;
    return !!(t.from && t.to && t.from <= e && e <= t.to) || !(null === (o = t.values) || void 0 === o || !o.includes(e)) || void 0;
  }
  function chkType(e, t, o) {
    let l = f.tableFullHalf[o][t];
    if (Array.isArray(l.not) && l.not.length) for (let t of l.not) if (_chkType(e, t)) return !1;
    if (_chkType(e, l)) return !0;
  }
  function process(e, t, l) {
    let f = [];
    l.skip = _optionsType(l.skip), l.only = _optionsType(l.only);
    let r = Array.isArray(e) ? e : new o(e);
    for (let e of r) {
      let o, r = "number" == typeof e ? e : e.codePointAt();
      if (l.only) {
        o = !0;
        for (let e in l.only) if (l.only[e] && chkType(r, e, l.type)) {
          o = !1;
          break;
        }
      }
      if (!o && l.skip) for (let e in l.skip) if (l.skip[e] && chkType(r, e, l.type)) {
        o = !0;
        break;
      }
      f.push(o ? r : t(r));
    }
    return l.returnType ? f : String.fromCodePoint.apply(String, f);
  }
  function factory(e, t, o) {
    return (f, r) => (r = l.all([ {}, r || {}, o || {}, {
      type: t
    } ]), process(f, e, r));
  }
  var p = {
    toFullNumber: n,
    toHalfNumber: a,
    toFullEnglish: i,
    toHalfEnglish: u,
    toFullWidth: y,
    toHalfWidth: d
  };
  e._chkType = _chkType, e._filterTable = function _filterTable(e) {
    let t = [];
    if (e.from && e.to) for (let o = e.from; o <= e.to; o++) t.push(o);
    return e.values && (t = t.concat(e.values)), Array.isArray(e.not) && e.not.length && (t = t.filter((function(t) {
      for (let o of e.not) if (_chkType(t, o)) return !1;
      return !0;
    }))), t;
  }, e._optionsType = _optionsType, e.chkType = chkType, e.default = p, e.factory = factory, 
  e.process = process, e.toFullEnglish = i, e.toFullNumber = n, e.toFullWidth = y, 
  e.toHalfEnglish = u, e.toHalfNumber = a, e.toHalfWidth = d, Object.defineProperty(e, "__esModule", {
    value: !0
  });
}));
//# sourceMappingURL=index.umd.production.min.cjs.map
