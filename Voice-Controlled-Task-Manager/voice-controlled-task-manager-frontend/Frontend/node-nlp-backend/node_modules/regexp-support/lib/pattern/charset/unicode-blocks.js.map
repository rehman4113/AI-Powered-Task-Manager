{"version":3,"file":"unicode-blocks.js","sourceRoot":"","sources":["unicode-blocks.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AA6CH,oDAOC;AAED,0CAUC;;AA5DD,4CAAwD;AACxD,mCAA2C;AAE3C,sEAAgD;AAEnC,QAAA,UAAU,GAAG,MAAM,CAAC;AACpB,QAAA,mBAAmB,GAAG,MAAM,CAAC;AAC7B,QAAA,UAAU,GAAG,GAAG,CAAC;AAE9B;;;GAGG;AACU,QAAA,cAAc,GAAG;IAE7B,aAAa,EAAE,KAAK;CAEpB,CAAC;AAEW,QAAA,kBAAkB,GAAG;IACjC,GAAG,YAAY;IAEf,GAAG,sBAAc;CACjB,CAAC;AAEW,QAAA,WAAW,GAEpB;IAEH,aAAa,EAAE;QAEd,CAAC,uBAAuB,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC;QACtD,CAAC,uBAAuB,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC;KAEvD;CAED,CAAC;AAEW,QAAA,iBAAiB,GAAG,IAAA,4BAAoB,EAAC,mBAAW,CAAC,CAAC;AAEnE,aAAa;AACb,SAAgB,oBAAoB,CAAI,cAAoC,MAAM,EAAE,YAAY,GAAG,mBAAW;IAE7G,OAAO,MAAM,CAAC,IAAI,CAAC,0BAAkB,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,GAAG;QAE7D,CAAC,CAAC,GAAG,CAAC,GAAG,IAAA,yBAAiB,EAAC,GAAG,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;QAC3D,OAAO,CAAC,CAAC;IACV,CAAC,EAAE,EAA+B,CAAC,CAAC;AACrC,CAAC;AAED,SAAgB,eAAe,CAAC,IAAY,EAAE,QAAkB;IAE/D,IAAI,MAAM,GAAG,kBAAU,CAAC;IAExB,IAAI,QAAQ,EACZ,CAAC;QACA,MAAM,GAAG,2BAAmB,CAAC;IAC9B,CAAC;IAED,OAAO,IAAA,wBAAgB,EAAC,IAAI,EAAE,MAAM,EAAE,kBAAU,CAAC,CAAC;AACnD,CAAC","sourcesContent":["/**\n * Created by user on 2018/5/6/006.\n */\n\nimport { ITypeCreateRegExp } from '../../index';\nimport { IPatternTestRow } from '../../pattern';\nimport { _createFnTestPattern } from '../../util/index';\nimport { _wrapToRegexName } from './index';\n\nimport * as CACHE_BLOCKS from '../cache/blocks';\n\nexport const KEY_PREFIX = '\\\\p{';\nexport const KEY_PREFIX_NEGATION = '\\\\P{';\nexport const KEY_SUFFIX = '}';\n\n/**\n * @link http://2ality.com/2017/07/regexp-unicode-property-escapes.html\n * @link https://en.wikipedia.org/wiki/Unicode_character_property\n */\nexport const UNICODE_BLOCKS = {\n\n\tInBasic_Latin: false,\n\n};\n\nexport const UNICODE_BLOCKS_ALL = {\n\t...CACHE_BLOCKS,\n\n\t...UNICODE_BLOCKS,\n};\n\nexport const PatternTest: {\n\t[k in keyof typeof UNICODE_BLOCKS_ALL]?: IPatternTestRow[];\n} = {\n\n\tInBasic_Latin: [\n\n\t\t['^\\\\p{InBasic_Latin}+$', 'u', '\\u007F', true, 'test'],\n\t\t['^\\\\p{InBasic_Latin}+$', 'u', '\\u0080', false, 'test'],\n\n\t],\n\n};\n\nexport const testUnicodeBlocks = _createFnTestPattern(PatternTest);\n\n// @ts-ignore\nexport function testUnicodeBlocksAll<T>(RegExpClass: ITypeCreateRegExp<T> = RegExp, testPatterns = PatternTest)\n{\n\treturn Object.keys(UNICODE_BLOCKS_ALL).reduce(function (a, key)\n\t{\n\t\ta[key] = testUnicodeBlocks(key, RegExpClass, testPatterns);\n\t\treturn a;\n\t}, {} as typeof UNICODE_BLOCKS_ALL);\n}\n\nexport function wrapToRegexName(name: string, negation?: boolean)\n{\n\tlet prefix = KEY_PREFIX;\n\n\tif (negation)\n\t{\n\t\tprefix = KEY_PREFIX_NEGATION;\n\t}\n\n\treturn _wrapToRegexName(name, prefix, KEY_SUFFIX);\n}\n\n"]}